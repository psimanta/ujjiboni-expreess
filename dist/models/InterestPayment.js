"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterestPayment = exports.PaymentMethod = exports.InterestPaymentStatus = void 0;
const mongoose_1 = __importStar(require("mongoose"));
var InterestPaymentStatus;
(function (InterestPaymentStatus) {
    InterestPaymentStatus["PENDING"] = "PENDING";
    InterestPaymentStatus["PAID"] = "PAID";
    InterestPaymentStatus["OVERDUE"] = "OVERDUE";
    InterestPaymentStatus["PARTIAL"] = "PARTIAL";
})(InterestPaymentStatus || (exports.InterestPaymentStatus = InterestPaymentStatus = {}));
var PaymentMethod;
(function (PaymentMethod) {
    PaymentMethod["CASH"] = "CASH";
    PaymentMethod["BANK_TRANSFER"] = "BANK_TRANSFER";
    PaymentMethod["CHEQUE"] = "CHEQUE";
    PaymentMethod["ONLINE"] = "ONLINE";
    PaymentMethod["UPI"] = "UPI";
})(PaymentMethod || (exports.PaymentMethod = PaymentMethod = {}));
const interestPaymentSchema = new mongoose_1.Schema({
    loanId: {
        type: mongoose_1.Schema.Types.ObjectId,
        ref: 'Loan',
        required: true,
    },
    paymentNumber: {
        type: String,
        required: true,
        unique: true,
    },
    dueDate: {
        type: Date,
        required: true,
    },
    paymentDate: {
        type: Date,
    },
    dueAmount: {
        type: Number,
        required: true,
        min: [0, 'Due amount must be non-negative'],
    },
    paidAmount: {
        type: Number,
        required: true,
        min: [0, 'Paid amount must be non-negative'],
        default: 0,
    },
    outstandingBalance: {
        type: Number,
        required: true,
        min: [0, 'Outstanding balance must be non-negative'],
    },
    interestRate: {
        type: Number,
        required: true,
        min: [0, 'Interest rate must be non-negative'],
    },
    monthlyInterestRate: {
        type: Number,
        required: true,
        min: [0, 'Monthly interest rate must be non-negative'],
    },
    status: {
        type: String,
        enum: Object.values(InterestPaymentStatus),
        default: InterestPaymentStatus.PENDING,
        required: true,
    },
    paymentMethod: {
        type: String,
        enum: Object.values(PaymentMethod),
    },
    paidBy: {
        type: mongoose_1.Schema.Types.ObjectId,
        ref: 'User',
    },
    receivedBy: {
        type: mongoose_1.Schema.Types.ObjectId,
        ref: 'User',
    },
    receiptNumber: {
        type: String,
        trim: true,
    },
    transactionReference: {
        type: String,
        trim: true,
    },
    penaltyAmount: {
        type: Number,
        min: [0, 'Penalty amount must be non-negative'],
        default: 0,
    },
    lateFeeAmount: {
        type: Number,
        min: [0, 'Late fee amount must be non-negative'],
        default: 0,
    },
    notes: {
        type: String,
        trim: true,
        maxlength: [500, 'Notes cannot exceed 500 characters'],
    },
    isAutoGenerated: {
        type: Boolean,
        default: true,
    },
}, {
    timestamps: true,
    toJSON: {
        virtuals: true,
        transform: function (_, ret) {
            delete ret._id;
            delete ret.__v;
            return ret;
        },
    },
});
interestPaymentSchema.index({ loanId: 1 });
interestPaymentSchema.index({ loanId: 1, dueDate: 1 });
interestPaymentSchema.index({ status: 1, dueDate: 1 });
interestPaymentSchema.index({ dueDate: 1 });
interestPaymentSchema.pre('save', function (next) {
    if (this.isModified('paidAmount') || this.isModified('dueAmount')) {
        if (this.paidAmount === 0) {
            this.status =
                new Date() > this.dueDate ? InterestPaymentStatus.OVERDUE : InterestPaymentStatus.PENDING;
        }
        else if (this.paidAmount >= this.dueAmount) {
            this.status = InterestPaymentStatus.PAID;
            if (!this.paymentDate) {
                this.paymentDate = new Date();
            }
        }
        else {
            this.status = InterestPaymentStatus.PARTIAL;
        }
    }
    next();
});
interestPaymentSchema.statics.generatePaymentNumber = async function () {
    const currentYear = new Date().getFullYear();
    const currentMonth = (new Date().getMonth() + 1).toString().padStart(2, '0');
    const prefix = `INT${currentYear}${currentMonth}`;
    const lastPayment = await this.findOne({
        paymentNumber: { $regex: `^${prefix}` },
    }).sort({ paymentNumber: -1 });
    let sequence = 1;
    if (lastPayment) {
        const lastSequence = parseInt(lastPayment.paymentNumber.substring(prefix.length));
        sequence = lastSequence + 1;
    }
    return `${prefix}${sequence.toString().padStart(4, '0')}`;
};
interestPaymentSchema.statics.findByLoan = function (loanId) {
    return this.find({ loanId })
        .populate('loanId', 'loanNumber principalAmount interestRate')
        .populate('paidBy', 'fullName email')
        .populate('receivedBy', 'fullName email')
        .sort({ dueDate: -1 });
};
interestPaymentSchema.statics.findOverduePayments = function () {
    return this.find({
        status: { $in: [InterestPaymentStatus.OVERDUE, InterestPaymentStatus.PARTIAL] },
        dueDate: { $lt: new Date() },
    })
        .populate('loanId', 'loanNumber principalAmount')
        .populate('paidBy', 'fullName email')
        .sort({ dueDate: 1 });
};
interestPaymentSchema.statics.findPendingPayments = function () {
    return this.find({
        status: { $in: [InterestPaymentStatus.PENDING, InterestPaymentStatus.PARTIAL] },
    })
        .populate('loanId', 'loanNumber principalAmount')
        .populate('paidBy', 'fullName email')
        .sort({ dueDate: 1 });
};
interestPaymentSchema.statics.getPaymentSummary = async function (loanId, memberId) {
    const matchStage = {};
    if (loanId) {
        matchStage.loanId = new mongoose_1.default.Types.ObjectId(loanId);
    }
    if (memberId) {
        matchStage.paidBy = new mongoose_1.default.Types.ObjectId(memberId);
    }
    const summary = await this.aggregate([
        { $match: matchStage },
        {
            $group: {
                _id: '$status',
                count: { $sum: 1 },
                totalDue: { $sum: '$dueAmount' },
                totalPaid: { $sum: '$paidAmount' },
                totalPenalty: { $sum: '$penaltyAmount' },
                totalLateFee: { $sum: '$lateFeeAmount' },
            },
        },
    ]);
    const result = {
        totalPayments: 0,
        pendingPayments: 0,
        paidPayments: 0,
        overduePayments: 0,
        partialPayments: 0,
        totalDueAmount: 0,
        totalPaidAmount: 0,
        totalPenaltyAmount: 0,
        totalLateFeeAmount: 0,
        totalOutstanding: 0,
    };
    summary.forEach(item => {
        result.totalPayments += item.count;
        result.totalDueAmount += item.totalDue;
        result.totalPaidAmount += item.totalPaid;
        result.totalPenaltyAmount += item.totalPenalty;
        result.totalLateFeeAmount += item.totalLateFee;
        switch (item._id) {
            case InterestPaymentStatus.PENDING:
                result.pendingPayments = item.count;
                break;
            case InterestPaymentStatus.PAID:
                result.paidPayments = item.count;
                break;
            case InterestPaymentStatus.OVERDUE:
                result.overduePayments = item.count;
                break;
            case InterestPaymentStatus.PARTIAL:
                result.partialPayments = item.count;
                break;
        }
    });
    result.totalOutstanding = result.totalDueAmount - result.totalPaidAmount;
    return result;
};
interestPaymentSchema.statics.generateMonthlyInterest = async function (loanId) {
    const Loan = mongoose_1.default.model('Loan');
    const loan = await Loan.findById(loanId);
    if (!loan) {
        throw new Error('Loan not found');
    }
    if (loan.status !== 'ACTIVE') {
        throw new Error('Interest can only be generated for active loans');
    }
    const outstandingBalance = await loan.calculateOutstandingBalance();
    if (outstandingBalance <= 0) {
        throw new Error('No outstanding balance for interest calculation');
    }
    const dueAmount = outstandingBalance * loan.monthlyInterestRate;
    const lastInterestPayment = await this.findOne({ loanId }).sort({ dueDate: -1 });
    let dueDate;
    if (lastInterestPayment) {
        dueDate = new Date(lastInterestPayment.dueDate);
        dueDate.setMonth(dueDate.getMonth() + 1);
    }
    else {
        dueDate = new Date(loan.disbursedDate);
        dueDate.setMonth(dueDate.getMonth() + 1);
    }
    const paymentNumber = await this.constructor.generatePaymentNumber();
    const interestPayment = new this({
        loanId,
        paymentNumber,
        dueDate,
        dueAmount,
        paidAmount: 0,
        outstandingBalance,
        interestRate: loan.interestRate,
        monthlyInterestRate: loan.monthlyInterestRate,
        status: InterestPaymentStatus.PENDING,
        isAutoGenerated: true,
    });
    await interestPayment.save();
    return interestPayment;
};
const InterestPayment = mongoose_1.default.model('InterestPayment', interestPaymentSchema);
exports.InterestPayment = InterestPayment;
exports.default = InterestPayment;
//# sourceMappingURL=InterestPayment.js.map